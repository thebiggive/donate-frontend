version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.0
  aws-ecr: circleci/aws-ecr@9.3.4
  aws-ecs: circleci/aws-ecs@4.1.0
  aws-s3: circleci/aws-s3@4.0.0
  browser-tools: circleci/browser-tools@1.4.8
  jira: circleci/jira@2.1.0

jobs:
  test:
    resource_class: large
    docker:
      - image: cimg/node:22.16.0-browsers
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    working_directory: ~/donate

    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - checkout

      - restore_cache:
          keys:
            - dependencies-with-chrome-{{ checksum "package-lock.json" }}

      - run: npm install --quiet

      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: dependencies-with-chrome-{{ checksum "package-lock.json" }}

      - run: npm run ci

      - store_artifacts:
          path: cypress/screenshots

  build-ecr:
    resource_class: large
    machine:
      enabled: true
      docker_layer_caching: true
    parameters:
      env:
        type: string
    steps:
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          # cache-from format is e.g. 123.dkr.ecr.eu-west-1.amazonaws.com/thebiggive-donate:staging
          extra_build_args: '--build-arg BUILD_ENV=<< parameters.env >> --build-arg FONTAWESOME_NPM_AUTH_TOKEN=${FONTAWESOME_NPM_AUTH_TOKEN} --cache-from "${AWS_US_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:<< parameters.env >>"'
          repo: "${AWS_ECR_REPO_NAME}"
          region: "us-east-1"
          tag: "<< parameters.env >>,<< parameters.env >>-${CIRCLE_SHA1}"

  copy-ecr-static-to-s3:
    parameters:
      env:
        type: string
    docker:
      - image: "${AWS_US_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:<< parameters.env >>-${CIRCLE_SHA1}"
    steps:
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

      - aws-s3/sync: # Sync dist/donate-frontend/browser to S3 with 1 year lifetime
          from: /usr/src/app/dist/donate-frontend/browser
          to: "s3://tbg-<< parameters.env >>-donate-static/d"
          arguments: '--acl public-read --cache-control "max-age=31536000"'

      - aws-s3/sync: # Sync transpiled ES5 static JS for older browsers to S3 (1 year)
          from: /usr/src/app/dist/donate-frontend/browser-es5
          to: "s3://tbg-<< parameters.env >>-donate-static/d-es5"
          arguments: '--acl public-read --cache-control "max-age=31536000"'

      - aws-s3/sync: # Sync dist/donate-frontend/browser/assets to S3 with 1 day lifetime
          from: /usr/src/app/dist/donate-frontend/browser/assets
          to: "s3://tbg-<< parameters.env >>-donate-static/assets"
          arguments: '--acl public-read --cache-control "max-age=86400"'

  deployment-notification:
    parameters:
      env:
        type: string
      env_type:
        type: string
    resource_class: large
    docker:
      - image: cimg/node:22.16.0-browsers
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
    steps:
      - checkout
      - jira/notify:
          pipeline_id: << pipeline.id >>
          pipeline_number: << pipeline.number >>
          job_type: deployment
          environment: << parameters.env >>
          environment_type: << parameters.env_type >>
      - run:
          name: Notify Slack
          command: COMMIT_MESSAGE=\"$(git show -s --format=%s $CIRCLE_SHA1)\" ./message-slack.mjs
workflows:
  commit:
    jobs:
      - test:
          context:
            - docker-hub-creds
            - jira
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: build
                environment_type: development

  deploy-regression:
    jobs:
      - build-ecr:
          filters:
            branches:
              only:
                - develop
          env: regression
          name: "Build Regression ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
      - copy-ecr-static-to-s3:
          env: regression
          name: "Copy Regression ECR static to S3"
          requires: ["Build Regression ECR image"]
          context:
            - ecs-deploys
      - aws-ecs/deploy_service_update:
          name: "Deploy Regression ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
          requires: ["Copy Regression ECR static to S3"]
          region: AWS_REGION
          family: "tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}"
          cluster: "tbg-regression-${AWS_REGION}"
          container_image_name_updates: "container=donate,tag=regression-${CIRCLE_SHA1}"

  deploy-staging:
    jobs:
      - build-ecr:
          filters:
            branches:
              only:
                - develop
          env: staging
          name: "Build Staging ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
      - copy-ecr-static-to-s3:
          env: staging
          name: "Copy Staging ECR static to S3"
          requires: ["Build Staging ECR image"]
          context:
            - ecs-deploys
      - aws-ecs/deploy_service_update:
          name: "Deploy Staging ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
            - jira
          requires: ["Copy Staging ECR static to S3"]
          region: AWS_REGION
          family: "tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}"
          cluster: "tbg-staging-${AWS_REGION}"
          container_image_name_updates: "container=donate,tag=staging-${CIRCLE_SHA1}"
      - deployment-notification:
          requires: ["Deploy Staging ECS with new image"]
          env: staging
          env_type: staging
          context:
            - slack
            - jira

  deploy-production:
    jobs:
      - build-ecr:
          filters:
            branches:
              only:
                - main
          env: production
          name: "Build Production ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
      - copy-ecr-static-to-s3:
          env: production
          name: "Copy Production ECR static to S3"
          requires: ["Build Production ECR image"]
          context:
            - ecs-deploys
      - aws-ecs/deploy_service_update:
          name: "Deploy Production ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
            - jira
          requires: ["Copy Production ECR static to S3"]
          region: AWS_REGION
          family: "tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}"
          cluster: "tbg-production-${AWS_REGION}"
          container_image_name_updates: "container=donate,tag=production-${CIRCLE_SHA1}"
      - deployment-notification:
          requires: ["Deploy Production ECS with new image"]
          env: production
          env_type: production
          context:
            - slack
            - jira
